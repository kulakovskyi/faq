"use strict";

var btnShow = document.querySelector('.question__btn');
var secondList = document.querySelector('.faq__list-not_show');
btnShow.addEventListener('click', function () {
  secondList.classList.toggle('_open');

  if (secondList.classList.contains('_open')) {
    btnShow.innerHTML = 'hide';
  } else {
    btnShow.innerHTML = 'show more';
  }
}); //video

var video = document.querySelector('.video');
var playBtn = document.querySelector('.video__button');
var videoOutline = document.querySelector('.video__start');
playBtn.addEventListener('click', function () {
  videoOutline.classList.add('not-show');
  video.src = video.src + '?autoplay=1';
}); //адаптация сраного iframe при загрузке страницы (при применении обязательно указывать значение атрибутов высоты и ширины в iframe)

document.addEventListener("DOMContentLoaded", function () {
  // используем событие загрузки страницы, не включая картинки и прочее
  var iframes = document.querySelectorAll('.iframeAdaptive');
  iframes.forEach(function (i) {
    // перебираем имеющиеся Iframe с присвоенным нами классом
    var iframeWidth = i.width; // берём из атрибута width ширину

    var iframeHeight = i.height; // берём из атрибута height высоту

    var iframeParent = i.parentNode; // определяем родительский элемент нашего Iframe

    var parentWidth = parseInt(getComputedStyle(iframeParent)['width']) - parseInt(getComputedStyle(iframeParent)['padding-left']) - parseInt(getComputedStyle(iframeParent)['padding-right']); // берём родительский контейнер и высчитываем нужную нам ширину, без учёта padding, margin и border

    var iframeProportion = parentWidth / iframeWidth;
    i.setAttribute('width', parentWidth); // устанавливаем ширину нашим Iframe

    i.setAttribute('height', iframeHeight * iframeProportion); // устанавливаем высоту нашим Iframe
  });
});
"use strict";
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJzZWNvbmQuanMiXSwibmFtZXMiOlsiYnRuU2hvdyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNlY29uZExpc3QiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiY29udGFpbnMiLCJpbm5lckhUTUwiLCJ2aWRlbyIsInBsYXlCdG4iLCJ2aWRlb091dGxpbmUiLCJhZGQiLCJzcmMiLCJpZnJhbWVzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJpIiwiaWZyYW1lV2lkdGgiLCJ3aWR0aCIsImlmcmFtZUhlaWdodCIsImhlaWdodCIsImlmcmFtZVBhcmVudCIsInBhcmVudE5vZGUiLCJwYXJlbnRXaWR0aCIsInBhcnNlSW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImlmcmFtZVByb3BvcnRpb24iLCJzZXRBdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsT0FBTyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsZ0JBQXZCLENBQWhCO0FBQ0EsSUFBTUMsVUFBVSxHQUFHRixRQUFRLENBQUNDLGFBQVQsQ0FBdUIscUJBQXZCLENBQW5CO0FBRUFGLE9BQU8sQ0FBQ0ksZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0MsWUFBSTtFQUNsQ0QsVUFBVSxDQUFDRSxTQUFYLENBQXFCQyxNQUFyQixDQUE0QixPQUE1Qjs7RUFDQSxJQUFHSCxVQUFVLENBQUNFLFNBQVgsQ0FBcUJFLFFBQXJCLENBQThCLE9BQTlCLENBQUgsRUFBMEM7SUFDdENQLE9BQU8sQ0FBQ1EsU0FBUixHQUFvQixNQUFwQjtFQUNILENBRkQsTUFFTztJQUNIUixPQUFPLENBQUNRLFNBQVIsR0FBb0IsV0FBcEI7RUFDSDtBQUNKLENBUEQsRSxDQVNBOztBQUVBLElBQU1DLEtBQUssR0FBR1IsUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLENBQWQ7QUFDQSxJQUFNUSxPQUFPLEdBQUdULFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBaEI7QUFDQSxJQUFNUyxZQUFZLEdBQUdWLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixlQUF2QixDQUFyQjtBQUVBUSxPQUFPLENBQUNOLGdCQUFSLENBQXlCLE9BQXpCLEVBQWtDLFlBQUk7RUFDbENPLFlBQVksQ0FBQ04sU0FBYixDQUF1Qk8sR0FBdkIsQ0FBMkIsVUFBM0I7RUFDQUgsS0FBSyxDQUFDSSxHQUFOLEdBQVlKLEtBQUssQ0FBQ0ksR0FBTixHQUFZLGFBQXhCO0FBQ0gsQ0FIRCxFLENBS0E7O0FBQ0FaLFFBQVEsQ0FBQ0csZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFlBQVc7RUFBRTtFQUN2RCxJQUFJVSxPQUFPLEdBQUdiLFFBQVEsQ0FBQ2MsZ0JBQVQsQ0FBMEIsaUJBQTFCLENBQWQ7RUFDQUQsT0FBTyxDQUFDRSxPQUFSLENBQWdCLFVBQVNDLENBQVQsRUFBWTtJQUFFO0lBQzFCLElBQUlDLFdBQVcsR0FBR0QsQ0FBQyxDQUFDRSxLQUFwQixDQUR3QixDQUNHOztJQUMzQixJQUFJQyxZQUFZLEdBQUdILENBQUMsQ0FBQ0ksTUFBckIsQ0FGd0IsQ0FFSzs7SUFDN0IsSUFBSUMsWUFBWSxHQUFHTCxDQUFDLENBQUNNLFVBQXJCLENBSHdCLENBR1M7O0lBQ2pDLElBQUlDLFdBQVcsR0FBR0MsUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQ0osWUFBRCxDQUFoQixDQUErQixPQUEvQixDQUFELENBQVIsR0FBa0RHLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUNKLFlBQUQsQ0FBaEIsQ0FBK0IsY0FBL0IsQ0FBRCxDQUExRCxHQUEyR0csUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQ0osWUFBRCxDQUFoQixDQUErQixlQUEvQixDQUFELENBQXJJLENBSndCLENBSWdLOztJQUN4TCxJQUFJSyxnQkFBZ0IsR0FBR0gsV0FBVyxHQUFHTixXQUFyQztJQUNBRCxDQUFDLENBQUNXLFlBQUYsQ0FBZSxPQUFmLEVBQXdCSixXQUF4QixFQU53QixDQU1jOztJQUN0Q1AsQ0FBQyxDQUFDVyxZQUFGLENBQWUsUUFBZixFQUF5QlIsWUFBWSxHQUFHTyxnQkFBeEMsRUFQd0IsQ0FPbUM7RUFDOUQsQ0FSRDtBQVNILENBWEQ7QUN4QkEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGJ0blNob3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucXVlc3Rpb25fX2J0bicpO1xuY29uc3Qgc2Vjb25kTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXFfX2xpc3Qtbm90X3Nob3cnKTtcblxuYnRuU2hvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgc2Vjb25kTGlzdC5jbGFzc0xpc3QudG9nZ2xlKCdfb3BlbicpO1xuICAgIGlmKHNlY29uZExpc3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdfb3BlbicpKXtcbiAgICAgICAgYnRuU2hvdy5pbm5lckhUTUwgPSAnaGlkZSdcbiAgICB9IGVsc2Uge1xuICAgICAgICBidG5TaG93LmlubmVySFRNTCA9ICdzaG93IG1vcmUnXG4gICAgfVxufSlcblxuLy92aWRlb1xuXG5jb25zdCB2aWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy52aWRlbycpXG5jb25zdCBwbGF5QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpZGVvX19idXR0b24nKVxuY29uc3QgdmlkZW9PdXRsaW5lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpZGVvX19zdGFydCcpXG5cbnBsYXlCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgIHZpZGVvT3V0bGluZS5jbGFzc0xpc3QuYWRkKCdub3Qtc2hvdycpXG4gICAgdmlkZW8uc3JjID0gdmlkZW8uc3JjICsgJz9hdXRvcGxheT0xJztcbn0pXG5cbi8v0LDQtNCw0L/RgtCw0YbQuNGPINGB0YDQsNC90L7Qs9C+IGlmcmFtZSDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSDRgdGC0YDQsNC90LjRhtGLICjQv9GA0Lgg0L/RgNC40LzQtdC90LXQvdC40Lgg0L7QsdGP0LfQsNGC0LXQu9GM0L3QviDRg9C60LDQt9GL0LLQsNGC0Ywg0LfQvdCw0YfQtdC90LjQtSDQsNGC0YDQuNCx0YPRgtC+0LIg0LLRi9GB0L7RgtGLINC4INGI0LjRgNC40L3RiyDQsiBpZnJhbWUpXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbigpIHsgLy8g0LjRgdC/0L7Qu9GM0LfRg9C10Lwg0YHQvtCx0YvRgtC40LUg0LfQsNCz0YDRg9C30LrQuCDRgdGC0YDQsNC90LjRhtGLLCDQvdC1INCy0LrQu9GO0YfQsNGPINC60LDRgNGC0LjQvdC60Lgg0Lgg0L/RgNC+0YfQtdC1XG4gICAgbGV0IGlmcmFtZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaWZyYW1lQWRhcHRpdmUnKTtcbiAgICBpZnJhbWVzLmZvckVhY2goZnVuY3Rpb24oaSkgeyAvLyDQv9C10YDQtdCx0LjRgNCw0LXQvCDQuNC80LXRjtGJ0LjQtdGB0Y8gSWZyYW1lINGBINC/0YDQuNGB0LLQvtC10L3QvdGL0Lwg0L3QsNC80Lgg0LrQu9Cw0YHRgdC+0LxcbiAgICAgICAgbGV0IGlmcmFtZVdpZHRoID0gaS53aWR0aDsgLy8g0LHQtdGA0ZHQvCDQuNC3INCw0YLRgNC40LHRg9GC0LAgd2lkdGgg0YjQuNGA0LjQvdGDXG4gICAgICAgIGxldCBpZnJhbWVIZWlnaHQgPSBpLmhlaWdodDsgLy8g0LHQtdGA0ZHQvCDQuNC3INCw0YLRgNC40LHRg9GC0LAgaGVpZ2h0INCy0YvRgdC+0YLRg1xuICAgICAgICBsZXQgaWZyYW1lUGFyZW50ID0gaS5wYXJlbnROb2RlOyAvLyDQvtC/0YDQtdC00LXQu9GP0LXQvCDRgNC+0LTQuNGC0LXQu9GM0YHQutC40Lkg0Y3Qu9C10LzQtdC90YIg0L3QsNGI0LXQs9C+IElmcmFtZVxuICAgICAgICBsZXQgcGFyZW50V2lkdGggPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKGlmcmFtZVBhcmVudClbJ3dpZHRoJ10pLXBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoaWZyYW1lUGFyZW50KVsncGFkZGluZy1sZWZ0J10pLXBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoaWZyYW1lUGFyZW50KVsncGFkZGluZy1yaWdodCddKTsgLy8g0LHQtdGA0ZHQvCDRgNC+0LTQuNGC0LXQu9GM0YHQutC40Lkg0LrQvtC90YLQtdC50L3QtdGAINC4INCy0YvRgdGH0LjRgtGL0LLQsNC10Lwg0L3Rg9C20L3Rg9GOINC90LDQvCDRiNC40YDQuNC90YMsINCx0LXQtyDRg9GH0ZHRgtCwIHBhZGRpbmcsIG1hcmdpbiDQuCBib3JkZXJcbiAgICAgICAgbGV0IGlmcmFtZVByb3BvcnRpb24gPSBwYXJlbnRXaWR0aCAvIGlmcmFtZVdpZHRoO1xuICAgICAgICBpLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBwYXJlbnRXaWR0aCk7IC8vINGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INGI0LjRgNC40L3RgyDQvdCw0YjQuNC8IElmcmFtZVxuICAgICAgICBpLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaWZyYW1lSGVpZ2h0ICogaWZyYW1lUHJvcG9ydGlvbik7IC8vINGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INCy0YvRgdC+0YLRgyDQvdCw0YjQuNC8IElmcmFtZVxuICAgIH0pO1xufSk7XG5cblxuIiwiIl19
